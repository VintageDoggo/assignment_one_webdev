<!--
  Author: Jorge Corichi Herrejon
  Student ID: 301275725
  File Name: my_projects.ejs
  Date: 09/28/2022
-->
<!--
  File to render the My Projects page. 
  This page implements css to stylize the gallery
-->
<%- include partials/header.ejs %>
<%- include partials/main_nav.ejs %>

<div class = "projects-desc">
    <h1>Check out my projects!</h1>
    <h3>This is some of the work I've been able to do during my professional and academic trajectory. </h3>
  </div>
  <br>
  <div class="short-bio">
    <p class = "project-title">Ergonomic Risk Asessment IoT Wearable Device</p>
    <p class = "content padded-content">
      What a mouthful!
      This multidisciplinary project consisted in creating a non-intrusive, wearable device that registers the angles between key joints that may be at risk when performing manual labor. 
      The acquired data is processed through an algorithm that decides whether the user is at ergonomic risk or not by taking translating a qualitative stadirized norm into a qunatitave scheme. 
      All data is communicated wirlessly and is displayed locally through a Graphic User Interface designed with PyQT and Python and is also available remotely through a wep application developed using the Django framework. 
      This was published at the International Conference on Human Interactions and Emerging Technologies 2021. You can learn more by checking the publication <a class = "ext-link" href = "https://link.springer.com/chapter/10.1007/978-3-030-74009-2_65">here!</a> 
    </p>
    <div class="gallery">
      <img src="images/iot_1.jpg" alt="" width="300" height="300">
      <img src="images/iot_2.png" alt="" width="300" height="300">
      <img src="images/iot_3.png" alt="" width="300" height="300">
    </div>
    <br>
    <div class="short-bio">
      <p class = "project-title">Human Machine Interface for Autonomous Electric Vehicle</p>
      <p class = "content padded-content">
        This project consisted in creating a Human Machine Interface campable of monitoring and calibrating certain paramenters of an autonomous electric vehicle. 
        The human machine interface consits of a physical control, a microcontroller and other electronics, coupled into a Raspberry Pi with a mounted touch screen. 
        Using the Linux environment the Raspberry Pi provides, a Graphic User Intergace was developed using Python and Kivy in order to have support in different platforms.
        I was in charge of the GUI programming, as well as all the logic behind the microcontroller and peripherals in the system. This project won Best Mechatronic Project in the Monterrey's Institute of Technology on 2021!
      </p>
      <div class="gallery">
        <img src="images/hmi_1.png" alt="" width="300" height="300">
        <img src="images/hmi_2.png" alt="" width="300" height="300">
        <img src="images/hmi_3.png" alt="" width="300" height="300">
      </div>
    </div>
    <br>
    <div class="short-bio">
      <p class = "project-title">Never Ending Spelling Bee App</p>
      <p class = "content padded-content">
        Have you ever played the Spelling Bee game from the New York Times? If not, you should. Everyday, you get seven letters and you need to find all the words (approved by the editors) that you can create using those letters. 
        I really enjoyed playing it and often found myself finding all the words early in the day, wishing I could play some more. So I did what anyone would've done and started coding my very own version of the app! 
        What makes my version stand appart from the original are two key features: multiple language support (so you can play this either in English or Spanish) and Never Ending Mode. 
        This mode takes out the editor from the equation and generates 7 random letters, then checks for all possible permutations and checks if it's a valid word using an already populated dictionary. 
        This is a work in progress, since the algorithm is still really slow and takes up to 5 minutes to find all possible words (which is an improvement from previous versions that would take about 10 minutes). 
        Once the algorithm is done, I plan to create GUI using Kivy. 
      </p>
      <div class="gallery">
        <img src="images/spell_1.png" alt="" width="300" height="300">
        <img src="images/spell_2.png" alt="" width="300" height="300">
      </div>
    </div>
  </div>
<%- include partials/footer.ejs %>